---
# 1. Configure SSH Directories and Keys
- name: Ensure .ssh directory exists
  ansible.builtin.file:
    path: /home/summitethic/.ssh
    state: directory
    owner: summitethic
    group: summitethic
    mode: "0700"

- name: Copy public key to authorized_keys
  ansible.posix.authorized_key:
    user: summitethic
    state: present
    key: "{{ lookup('file', 'files/id_ed25519.pub') }}"

# 2. Harden SSH
- name: Disable root login
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin"
    line: "PermitRootLogin no"
    state: present

- name: Disable password authentication
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^PasswordAuthentication"
    line: "PasswordAuthentication no"
    state: present

- name: Restart SSH
  ansible.builtin.service:
    name: ssh
    state: restarted

# 3. UFW and fail2ban
- name: Install UFW
  ansible.builtin.apt:
    name: ufw
    state: present
    update_cache: true

- name: Allow SSH through firewall
  ufw:
    rule: allow
    name: "OpenSSH"
  become: true

- name: Enable UFW
  ansible.builtin.command: "ufw --force enable"
  changed_when: false

- name: Install fail2ban
  ansible.builtin.apt:
    name: fail2ban
    state: present
    update_cache: true

- name: Configure fail2ban
  ansible.builtin.copy:
    src: fail2ban.jail.local
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: "0600"

- name: Restart fail2ban
  ansible.builtin.service:
    name: fail2ban
    state: restarted

# 4. Enable automatic system updates
- name: Install unattended-upgrades
  ansible.builtin.apt:
    name: unattended-upgrades
    state: present
    update_cache: true
  become: true

- name: Configure unattended upgrades
  ansible.builtin.copy:
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    content: |
      Unattended-Upgrade::Allowed-Origins {
        "${distro_id}:${distro_codename}";
        "${distro_id}:${distro_codename}-security";
      };
      Unattended-Upgrade::Mail "root@localhost";
      Unattended-Upgrade::Automatic-Reboot "true";
  become: true
  mode: "0600"

# 5. Install Docker (example with pinned version or 'present' instead of 'latest')
- name: Install Docker dependencies
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: true

- name: Add Docker GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
    state: present

- name: Install Docker
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true

- name: Add 'summitethic' to docker group
  ansible.builtin.user:
    name: summitethic
    append: true
    groups: docker

# 6. Create Swap (twice the size of RAM)
- name: Gather system facts
  ansible.builtin.setup:

- name: Determine desired swap size
  ansible.builtin.set_fact:
    desired_swap_mb: "{{ ansible_facts.memtotal_mb * 2 }}"

- name: Create swap file
  ansible.builtin.command: "fallocate -l {{ desired_swap_mb }}M /swapfile"
  args:
    creates: /swapfile
  changed_when: false

- name: Set swapfile permissions
  ansible.builtin.file:
    path: /swapfile
    owner: root
    group: root
    mode: "0600"

- name: Make swap
  ansible.builtin.command: "mkswap /swapfile"
  args:
    creates: /swapfile
  changed_when: false

- name: Enable swap
  ansible.builtin.command: "swapon /swapfile"
  changed_when: false

- name: Configure swap in fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    line: "/swapfile swap swap defaults 0 0"
    state: present
    mode: "0644"

- name: Reboot server to activate changes
  ansible.builtin.reboot:
  # If you only want to reboot if changed, put it in a handler or use a when-condition
